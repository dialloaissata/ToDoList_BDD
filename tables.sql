--------------------------------------------------------------------------------------------------
-- Création des tables 
--------------------------------------------------------------------------------------------------
CREATE TABLE Utilisateur(
    idUser INT PRIMARY KEY,
    nom VARCHAR(50) NOT NULL,
    prenom VARCHAR(50) NOT NULL,
    adresse VARCHAR(255),
    dateNaissance DATE,
    dateInscription DATE NOT NULL,
    login VARCHAR(10) UNIQUE NOT NULL,
    mdp VARCHAR(255) NOT NULL,
    score INT default 0, -- Initialiser le score à zéro
    niveau INT default 1, -- Niveau initial
    regularite FLOAT default 0
);

CREATE TABLE Projet(
    idProjet INT PRIMARY KEY,
    nomProjet VARCHAR(50) NOT NULL,
    statut VARCHAR(20),
    idCreateur INT,
    FOREIGN KEY (idCreateur) REFERENCES Utilisateur(idUser)
);

CREATE TABLE Liste_tache (
    idListe INT PRIMARY KEY,
    nomListe VARCHAR(50) NOT NULL,
    idProjet INT,
    idCreateur INT,
    FOREIGN KEY (idProjet) REFERENCES Projet(idProjet),
    FOREIGN KEY (idCreateur) REFERENCES Utilisateur(idUser)
);

CREATE TABLE Tache (
    idTache INT GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    intitule VARCHAR(100) NOT NULL,
    description VARCHAR(255),
    categorie VARCHAR(50),
    dateDebut DATE,
    dateFin DATE,
    priorite INT,
    statut INT,
    lienExterne VARCHAR(255),
    estPeriodique NUMBER(1) DEFAULT 0,
    periode VARCHAR(7),
    dateEcheance DATE,
    idCreateur INT,
    idProjet INT,
    idListeTache INT,
    idRealisateur INT, --utilisateur qui a accompli la tâche
    dateAccomplie DATE DEFAULT NULL, --date à laquelle la tâche a été accomplie
    FOREIGN KEY (idCreateur) REFERENCES Utilisateur(idUser),
    FOREIGN KEY (idProjet) REFERENCES Projet(idProjet),
    FOREIGN KEY (idListeTache) REFERENCES Liste_tache(idListe),
    FOREIGN KEY (idRealisateur) REFERENCES Utilisateur(idUser)
);

CREATE TABLE Tache_Passee (
    idTache INT,
    idCreateur INT,
    intitule VARCHAR(50),
    dateAccomplie DATE DEFAULT NULL,
    PRIMARY KEY (idTache, idCreateur),
    FOREIGN KEY (idTache) REFERENCES Tache(idTache),
    FOREIGN KEY (idCreateur) REFERENCES Utilisateur(idUser)
);

CREATE TABLE Tache_A_Realiser (
    idTache INT,
    idCreateur INT,
    intitule VARCHAR(50),
    PRIMARY KEY (idTache, idCreateur),
    FOREIGN KEY (idTache) REFERENCES Tache(idTache),
    FOREIGN KEY (idCreateur) REFERENCES Utilisateur(idUser)
);

CREATE TABLE Dependances (
    idTacheParent INT,
    idTacheEnfant INT,
    PRIMARY KEY (idTacheParent, idTacheEnfant),
    FOREIGN KEY (idTacheParent) REFERENCES Tache(idTache),
    FOREIGN KEY (idTacheEnfant) REFERENCES Tache(idTache)
);

CREATE TABLE Assignation (
  idUser INT,
  idTache INT,
  PRIMARY KEY (idUser, idTache),
  FOREIGN KEY (idUser) REFERENCES Utilisateur(idUser),
  FOREIGN KEY (idTache) REFERENCES Tache(idTache)
);

CREATE TABLE Tache_Archivee (
    idTache INT PRIMARY KEY,
    intitule VARCHAR(100) NOT NULL,
    description VARCHAR(255),
    categorie VARCHAR(50),
    dateDebut DATE,
    dateFin DATE,
    priorite INT,
    statut INT,
    lienExterne VARCHAR(255),
    estPeriodique NUMBER(1) DEFAULT 0,
    periode VARCHAR(7),
    dateEcheance DATE,
    idCreateur INT,
    idProjet INT,
    idListeTache INT,
    idRealisateur INT,
    dateAccomplie DATE DEFAULT NULL
);
--------------------------------------------------------------------------------------------------
-- Ajout des contraintes
--------------------------------------------------------------------------------------------------
--Table Utilisateur :
ALTER TABLE Utilisateur
ADD CONSTRAINT check_id_user_positif
CHECK (idUser > 0);

ALTER TABLE Utilisateur
ADD CONSTRAINT check_format_login
CHECK (
    LOWER(SUBSTR(prenom, 1, 1)) = SUBSTR(login, 1, 1) AND 
    (
        (LENGTH(nom) <= 7 AND LOWER(nom) = SUBSTR(login, 2, LENGTH(nom))) OR
        (LENGTH(nom) > 7 AND LOWER(SUBSTR(nom, 1, 7)) = SUBSTR(login, 2, 7))
    ) AND
    REGEXP_LIKE(SUBSTR(login, -2), '^[0-9]{2}$')
);

ALTER TABLE Utilisateur
ADD CONSTRAINT check_format_mdp
CHECK (REGEXP_LIKE(mdp,'^[a-zA-Z0-9_]{4,}+$'));

--Tache Projet :
ALTER TABLE Projet
ADD CONSTRAINT check_id_projet_positif
CHECK (idProjet > 0);

ALTER TABLE Projet
ADD CONSTRAINT check_statut_projet
CHECK (statut IN ('En cours', 'Terminé'));

--Table Tache :
ALTER TABLE Tache
ADD CONSTRAINT check_id_tache_positif
CHECK (idTache > 0);

ALTER TABLE Tache
ADD CONSTRAINT check_date_debut_fin
CHECK (dateDebut <= dateFin);

ALTER TABLE Tache
ADD CONSTRAINT check_statut
CHECK (statut IN (0, 1));

ALTER TABLE Tache
ADD CONSTRAINT check_priorite
CHECK (priorite IN (1, 2, 3));

ALTER TABLE Tache
ADD CONSTRAINT check_estPeriodique
CHECK (estPeriodique IN (0, 1));

ALTER TABLE Tache
ADD CONSTRAINT check_siPeriodique
CHECK ((estPeriodique = 0 ) OR (estPeriodique = 1 AND dateDebut IS NOT NULL AND dateFin IS NOT NULL AND periode IS NOT NULL));

ALTER TABLE Tache
ADD CONSTRAINT check_siNonPeriodiqueDateEcheancePrecisee
CHECK((estPeriodique = 0 AND dateEcheance IS NOT NULL) OR estPeriodique = 1);

ALTER TABLE Tache
ADD CONSTRAINT check_periode
CHECK (periode IN ('jour', 'semaine', 'mois'));

ALTER TABLE Tache
ADD CONSTRAINT check_idRealisateur
CHECK ((statut = 1 AND idRealisateur IS NOT NULL AND dateAccomplie IS NOT NULL) OR (statut = 0 AND idRealisateur IS NULL AND dateAccomplie IS NULL));

--Table Liste_tache :
ALTER TABLE Liste_tache
ADD CONSTRAINT check_id_liste_positif
CHECK (idListe > 0);

--Table Tache_Passee:
ALTER TABLE Tache_Passee
ADD CONSTRAINT check_id_tachep_positif
CHECK (idTache > 0);

--Table Tache_A_Realiser:
ALTER TABLE Tache_A_Realiser
ADD CONSTRAINT check_id_tacher_positif
CHECK (idTache > 0);
